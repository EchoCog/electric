diff --git a/src/pg_access.rs b/src/pg_access.rs
index e1cb065..742d2bc 100644
--- a/src/pg_access.rs
+++ b/src/pg_access.rs
@@ -103,11 +103,12 @@ impl PgAccess {
     /// Returns PathBuf(cache_directory) on success, an error otherwise
     ///
     async fn create_cache_dir_structure(fetch_settings: &PgFetchSettings) -> PgResult<PathBuf> {
-        let cache_dir = dirs::cache_dir().ok_or_else(|| PgEmbedError {
-            error_type: PgEmbedErrorType::InvalidPgUrl,
-            source: None,
-            message: None,
-        })?;
+        // let cache_dir = dirs::cache_dir().ok_or_else(|| PgEmbedError {
+        //     error_type: PgEmbedErrorType::InvalidPgUrl,
+        //     source: None,
+        //     message: None,
+        // })?;
+        let cache_dir = &fetch_settings.cache_dir;
         let os_string = match fetch_settings.operating_system {
             OperationSystem::Darwin | OperationSystem::Windows | OperationSystem::Linux => {
                 fetch_settings.operating_system.to_string()
diff --git a/src/pg_fetch.rs b/src/pg_fetch.rs
index 47604ec..82f9ca3 100644
--- a/src/pg_fetch.rs
+++ b/src/pg_fetch.rs
@@ -7,7 +7,7 @@
 use bytes::Bytes;
 use futures::TryFutureExt;
 use reqwest::Response;
-use std::future::Future;
+use std::path::PathBuf;
 
 use crate::pg_enums::{Architecture, OperationSystem};
 use crate::pg_errors::{PgEmbedError, PgEmbedErrorType};
@@ -40,6 +40,8 @@ pub struct PgFetchSettings {
     pub architecture: Architecture,
     /// The postgresql version
     pub version: PostgresVersion,
+    /// The cache_dir you actually want
+    pub cache_dir: PathBuf
 }
 
 impl Default for PgFetchSettings {
@@ -49,6 +51,11 @@ impl Default for PgFetchSettings {
             operating_system: OperationSystem::default(),
             architecture: Architecture::default(),
             version: PG_V13,
+            cache_dir: dirs::cache_dir().ok_or_else(|| PgEmbedError {
+                    error_type: PgEmbedErrorType::InvalidPgUrl,
+                    source: None,
+                    message: None,
+                }).unwrap()
         }
     }
 }
