[doc Verifies that several tenants can share the same PG instance and their publications and slots do not conflict]

[include _macros.luxinc]

[global pg_container_name=multi-tenancy-same-db__pg]

# Tenant 1 uses the default `postgres` DB
# Tenant 2 uses the `electric` DB
[global tenant1_database_url=postgresql://postgres:password@localhost:54331/postgres?sslmode=disable]
[global tenant2_database_url=postgresql://postgres:password@localhost:54331/electric?sslmode=disable]

###

## Start a new Postgres DB
[invoke setup_pg_with_name "pg" "" ""]

## Start Electric in multi tenancy mode
[invoke setup_multi_tenant_electric]

[shell electric]
  ???[info] Running Electric.Plug.Router with Bandit 1.5.5 at 0.0.0.0:3000 (http)

## Create tenant 1
[invoke add_tenant "tenant1" 3000 $tenant1_database_url]
[invoke check_tenant_status "tenant1" "active" 3000]


## Create tenant 2
[invoke add_tenant "tenant2" 3000 $tenant2_database_url]
[invoke check_tenant_status "tenant2" "active" 3000]

## Insert some data in both DBs
[shell tenant1_psql]
  !docker exec -u postgres -it $pg_container_name psql -d postgres
  !CREATE TABLE items (id INT PRIMARY KEY, val TEXT);
  ??CREATE TABLE
  !INSERT INTO items (id, val) VALUES (1, 'tenant1');
  ??INSERT 0 1

[shell tenant2_psql]
  !docker exec -u postgres -it $pg_container_name psql -d electric
  !CREATE TABLE items (id INT PRIMARY KEY, val TEXT);
  ??CREATE TABLE
  !INSERT INTO items (id, val) VALUES (1, 'tenant2');
  ??INSERT 0 1

## Check that both tenants can query their data
[shell tenant1]
  # Chech tenant 1 data
  !curl -i -X GET "http://localhost:3000/v1/shape?table=items&offset=-1&database_id=tenant1"
  ?\e\[1melectric-handle\e\[0m: ([\d-]+)
  [local shape_id=$1]
  ?\e\[1melectric-offset\e\[0m: ([\d_]+)
  [local offset=$1]
  """??
  [{"key":"\"public\".\"items\"/\"1\"","value":{"id":"1","val":"tenant1"},"headers":{"operation":"insert","relation":["public","items"]},"offset":"$offset"}
  ]
  """
  
# Check tenant 2 data
[shell tenant2]
  !curl -i -X GET "http://localhost:3000/v1/shape?table=items&offset=-1&database_id=tenant2"
  ?\e\[1melectric-handle\e\[0m: ([\d-]+)
  [local shape_id=$1]
  ?\e\[1melectric-offset\e\[0m: ([\d_]+)
  [local offset=$1]
  """??
  [{"key":"\"public\".\"items\"/\"1\"","value":{"id":"1","val":"tenant2"},"headers":{"operation":"insert","relation":["public","items"]},"offset":"$offset"}
  ]
  """

## Now do a live query on tenant 1
[shell tenant1]
  ??$PS1
  !curl -i -X GET "localhost:3000/v1/shape?table=items&offset=$offset&handle="$shape_id"&database_id=tenant1&live"

## And a live query on tenant 2
[shell tenant2]
  ??$PS1
  !curl -i -X GET "localhost:3000/v1/shape?table=items&offset=$offset&handle="$shape_id"&database_id=tenant2&live"

## Insert some data in tenant 1
[shell tenant1_psql]
  !INSERT INTO items (id, val) VALUES (2, 'tenant1');
  ??INSERT 0 1

## Insert some data in tenant 2
[shell tenant2_psql]
  !INSERT INTO items (id, val) VALUES (2, 'tenant2');
  ??INSERT 0 1

## Check that tenant 1 sees the new data
[shell tenant1]
  # give some time for the data to sync
  [sleep 1]
  ?\e\[1melectric-offset\e\[0m: ([\d_]+)
  [local offset=$1]
  ??[{"offset":"$offset","value":{"id":"2","val":"tenant1"},"key":"\"public\".\"items\"/\"2\"","headers":{"relation":["public","items"],"operation":"insert","txid":
  ?[\d+]
  ??}},{"headers":{"control":"up-to-date"}}]$PS1

## Check that tenant 2 sees the new data
[shell tenant2]
  [sleep 1]
  ?\e\[1melectric-offset\e\[0m: ([\d_]+)
  [local offset=$1]
  ??[{"offset":"$offset","value":{"id":"2","val":"tenant2"},"key":"\"public\".\"items\"/\"2\"","headers":{"relation":["public","items"],"operation":"insert","txid":
  ?[\d+]
  ??}},{"headers":{"control":"up-to-date"}}]$PS1

[cleanup]
  [invoke teardown]
